name: C++ CI common

on:
  workflow_call:
    inputs:
      matrix:
        description: 'Matrix object encoded as json'
        required: true
        type: string

      #envv:
      #  description: 'Environment object encoded as json'
      #  required: true
      #  type: string

env:
  BUILD_TYPE: ${{ inputs.build_type || 'Debug' }}
  # NOTE: update executable name if it is changed in CMakeLists.txt
  EXECUTABLE_NAME: "oop"
  INPUT_FILENAME: "tastatura.txt"
  BIN_DIR: "bin"       # update in cmake/Options.cmake:6 if changing name here
  BUILD_DIR: "build"
  EXT_DIR: "ext"
  GEN_DIR: "generated"

defaults:
  run:
    # Use a bash shell, so we can use the same syntax for environment variable
    # access regardless of the host operating system
    # https://github.com/saxbophone/CPP20-Cross-Platform-Template
    shell: bash

jobs:
  build-common:
    name: build # ${{ fromJSON(inputs.matrix).name }}
    runs-on: ${{ fromJSON(inputs.matrix).os }}
    timeout-minutes: 8
    permissions:
      attestations: write
      contents: write
      id-token: write

    env:
    #  BUILD_TYPE: ${{ fromJSON(inputs.envv).BUILD_TYPE }}
    #  EXECUTABLE_NAME: ${{ fromJSON(inputs.envv).EXECUTABLE_NAME }}
    #  INPUT_FILENAME: ${{ fromJSON(inputs.envv).INPUT_FILENAME }}
    #  BIN_DIR: ${{ fromJSON(inputs.envv).BIN_DIR }}
    #  BUILD_DIR: ${{ fromJSON(inputs.envv).BUILD_DIR }}
    #  EXT_DIR: ${{ fromJSON(inputs.envv).EXT_DIR }}
    #  GEN_DIR: ${{ fromJSON(inputs.envv).GEN_DIR }}
      CC: ${{ fromJSON(inputs.matrix).c }}
      CXX: ${{ fromJSON(inputs.matrix).cxx }}
      VSCMD_SKIP_SENDTELEMETRY: 1

      # NOTE: replace with another version if this one does not work
      # For more versions, see https://winlibs.com or
      # https://github.com/brechtsanders/winlibs_mingw/releases/
      MINGW_VER: "13.3.0posix-11.0.1-msvcrt-r1/winlibs-x86_64-posix-seh-gcc-13.3.0-mingw-w64msvcrt-11.0.1-r1.7z"
      # Example:
      # MINGW_VER: "13.3.0posix-11.0.1-ucrt-r1/winlibs-x86_64-posix-seh-gcc-13.3.0-mingw-w64ucrt-11.0.1-r1.7z"
      # MINGW_VER: "14.1.0posix-18.1.7-12.0.0-ucrt-r2/winlibs-x86_64-posix-seh-gcc-14.1.0-mingw-w64ucrt-12.0.0-r2.7z"
      # MINGW_VER: "14.1.0posix-18.1.7-12.0.0-msvcrt-r2/winlibs-x86_64-posix-seh-gcc-14.1.0-mingw-w64msvcrt-12.0.0-r2.7z"

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set timestamp and zip name
        run: |
          #echo ${{ inputs.envv }}
          #echo ${{ inputs.envv.BUILD_TYPE }} >> ${GITHUB_ENV}
          echo "TIMESTAMP=$(date +%Y-%m-%d-%H-%M-%S)" >> ${GITHUB_ENV}

          # use the full name as prefix: {user_name}_{repo_name} (replace / with _)
          echo "ZIP_NAME=$(echo "${GITHUB_REPOSITORY}_${{ env.BUILD_TYPE }}_${{ fromJSON(inputs.matrix).os }}_${{ fromJSON(inputs.matrix).cxx }}${{ fromJSON(inputs.matrix).asan_name }}" | sed 's|/|_|')" >> ${GITHUB_ENV}

          # or use only the repo name (github does not have a predefined environment variable for this)
          # the regex splits by / and keeps everything after / without the / character
          # echo "ZIP_NAME=$(echo "${GITHUB_REPOSITORY}_${{ env.BUILD_TYPE }}_${{ fromJSON(inputs.matrix).os }}_${{ fromJSON(inputs.matrix).cxx }}${{ fromJSON(inputs.matrix).asan_name }}" | sed -E 's|.+/(.+)|\1|')" >> ${GITHUB_ENV}

      - name: Install packages
        uses: ./.github/actions/install-packages
        with:
          matrix: ${{ inputs.matrix }}

      - name: Configure CMake
        uses: ./.github/actions/configure-cmake
        with:
          matrix: ${{ inputs.matrix }}
          custom_flags: ${{ fromJSON(inputs.matrix).cmake_flags }}
          warnings_as_errors: 'ON'

      - name: Build
        run: bash ./scripts/cmake.sh build -t ${{ env.BUILD_TYPE }}

      - name: Install
        # Use CMake to "install" build artifacts (only interested in CMake registered targets) to our custom artifacts directory
        run: |
          bash ./scripts/cmake.sh install -i artifacts -t ${{ env.BUILD_TYPE }}

      - name: Move artifacts
        run: |
          mkdir ${{ env.ZIP_NAME }}
          mv artifacts/${{ env.BIN_DIR }}/* ${{ env.ZIP_NAME }}
          ls -la ${{ env.ZIP_NAME }}

      - name: Process artifacts
        uses: ./.github/actions/process-artifacts
        with:
          matrix: ${{ inputs.matrix }}

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ZIP_NAME }}_${{ env.TIMESTAMP }}
          path: ${{ env.ZIP_NAME }}
          retention-days: 30

      - name: Runtime checks
        uses: ./.github/actions/runtime-checks
        with:
          matrix: ${{ inputs.matrix }}

      - name: Create release
        uses: ./.github/actions/create-release
        if: startsWith(github.ref, 'refs/tags/')
