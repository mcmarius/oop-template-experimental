name: C++ CI

on:
  push:
    branches: ['*'] # NOTE: replace/update with appropriate branch name(s)
    tags: ['*']
  pull_request:
    branches: ['*'] # NOTE: replace/update with appropriate branch name(s)
  workflow_dispatch:
    inputs:
      build_type:
        description: Build type
        required: false
        default: 'Debug'
        type: choice
        options:
          - Debug
          - Release
          - RelWithDebInfo
          - MinSizeRel

env:
  BUILD_TYPE: ${{ inputs.build_type || 'Debug' }}
  # NOTE: update executable name if it is changed in CMakeLists.txt
  EXECUTABLE_NAME: "oop"
  INPUT_FILENAME: "tastatura.txt"
  BIN_DIR: "bin"       # update in cmake/Options.cmake:6 if changing name here
  BUILD_DIR: "build"
  EXT_DIR: "ext"
  GEN_DIR: "generated"

defaults:
  run:
    # Use a bash shell, so we can use the same syntax for environment variable
    # access regardless of the host operating system
    # https://github.com/saxbophone/CPP20-Cross-Platform-Template
    shell: bash

jobs:
  cppcheck:
    name: "Cppcheck"
    runs-on: ubuntu-22.04
    timeout-minutes: 5
    env:
      # check https://github.com/danmar/cppcheck/releases for latest version
      # NOTE: consider updating this value in scripts/build_cppcheck.sh:4 when changing this value
      CPPCHECK_VER: "2.14.2"
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Run cppcheck
        uses: ./.github/actions/cppcheck

  clang-tidy:
    name: "Clang-Tidy"
    runs-on: ubuntu-22.04
    timeout-minutes: 5
    env:
      CLANG_VER: 18
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Run clang-tidy
        uses: ./.github/actions/clang-tidy


  build:
    name: ${{ matrix.name }}
    permissions:
      attestations: write
      contents: write
      id-token: write
    uses: ./.github/workflows/build-common.yml
    with:
      matrix: ${{ toJson(matrix) }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            c: clang-18
            cxx: clang++-18
            clang_ver: "18"
            clang_ver_full: "18.1.8"
            name: "MSan: Ubuntu 22.04 Clang 18"
            cmake_flags: "-DUSE_MSAN=ON"
            cmake_generator: Ninja
            # This env runs memory sanitizers
            runs_msan: true

          - os: ubuntu-22.04
            c: gcc-12
            cxx: g++-12
            name: "ASan: Ubuntu 22.04 GCC 12"
            cmake_flags: "-DUSE_ASAN=ON"
            cmake_generator: Ninja
            # This env runs address sanitizers
            runs_asan: true
            # this is used to add a suffix to the archive name since we use the same compiler version
            asan_name: "-asan"

          - os: ubuntu-22.04
            c: gcc-12
            cxx: g++-12
            name: "Valgrind: Ubuntu 22.04 GCC 12"
            # cmake_flags:
            cmake_generator: Ninja
            # This env runs valgrind
            runs_valgrind: true

          - os: macos-14
            c: clang
            cxx: clang++
            name: "ASan: macOS 14 Apple Clang 15"
            cmake_flags: "-DUSE_ASAN=ON"
            # cmake_generator:
            # This env runs address sanitizers
            runs_asan: true

          - os: macos-14
            c: gcc-13
            cxx: g++-13
            name: "macOS 14 GCC 13"
            # cmake_flags:
            # cmake_generator: Ninja

          - os: windows-2022
            c: cl
            cxx: cl
            name: "ASan: Windows 2022 MSVC 19.40"
            cmake_flags: "-DUSE_ASAN=ON"
            # Ninja is not faster on MSVC because... MSVC
            # cmake_generator: "Ninja"
            # cmake_generator: "Ninja Multi-Config"
            # This env runs address sanitizers
            runs_asan: true

          - os: windows-2022
            c: gcc
            cxx: g++
            name: "Windows 2022 MinGW GCC 13"
            # cmake_flags:
            cmake_generator: Ninja
